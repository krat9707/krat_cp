class Node
{
    public:
        Node* links[26];
        bool flag = false;

        bool containsKey(char ch)
        {
            return (links[ch - 'a'] != nullptr);
        }

        void putKey(char ch)
        {
            links[ch - 'a'] = new Node(); 
        }

        Node* getKey(char ch)
        {
            return links[ch - 'a'];
        }

        void markEnd()
        {
            flag = true;
        }

        bool isEnd()
        {
            return flag;
        }
};

class Trie {
    Node* root;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string word) {

        Node* node = root;

        for(int i = 0; i < word.size(); i++)
        {
            if(!node -> containsKey(word[i]))
            {
                node -> putKey(word[i]);
            }

            node = node -> getKey(word[i]);
        }

        node -> markEnd();
    }
    
    bool search(string word) {
        Node* node = root;

        for(int i = 0; i < word.size(); i++)
        {
            if(node -> containsKey(word[i]))
            {
                node = node -> getKey(word[i]);
            }   
            else
                return false;
        }

        if(node -> isEnd())
            return true;
        else
            return false;
    }
    
    bool startsWith(string word) {
        Node* node = root;

        for(int i = 0; i < word.size(); i++)
        {
            if(node -> containsKey(word[i]))
            {
                node = node -> getKey(word[i]);
            }   
            else
                return false;
        }

        return true;
    }
};
